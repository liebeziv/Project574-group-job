wger Project Structure Report
Group Member Information:

Name: Simin Cheng, Student ID: 1663732, Email: sc1040@students.waikato.ac.nz
Name: Bai Lu, Student ID: 1671298, Email: ys677@students.waikato.ac.nz
Name: Ziqi Lin, Student ID: 1674249, Email: zl354@students.waikato.ac.nz
Name: Zhengrong Chen, Student ID: 1660321, Email: zc199@students.waikato.ac.nz

Project Overview

Project Name and Functionality

wger is a free, open-source fitness and nutrition manager designed to provide users with a comprehensive solution for tracking their fitness journey. The project aims to solve multiple problems related to personal fitness and nutrition planning.

 Core Features

wger offers the following main features to its users:

Customizable Workout Plans: Create flexible workout routines with automated progression rules.
Metric Tracking: Log and track diet plans, body weight, and custom measurement data.
Nutrition Management: Log calorie intake using the Open Food Facts database.
Exercise Encyclopedia: A built-in exercise database.
Cross-Platform Applications: Available on Android, iOS, F-Droid, and Flathub.
Self-Hosted Deployment: Use Docker to deploy the application and maintain control over your data.
Multilingual Support: Community-translated through Weblate.
API: A REST API that supports third-party integrations and automation.
Gym Management: Includes basic gym management functionalities.

License Information

The project has a multi-license structure:

Application Code:** GNU Affero General Public License 3.0 or later.
Exercise/Food Data:** Creative Commons Attribution Share-Alike 3.0 (CC-BY-SA 3.0).
Documentation:** Creative Commons Attribution Share-Alike (CC-BY-SA 4.0).

Developer Code of Conduct and Contribution Guidelines

The project follows standard open-source community practices. Developers are welcome to contribute in various forms, including but not limited to code, translations, and exercise data.

Support Resources

The project provides several support channels:

Official Documentation: [https://wger.readthedocs.io/en/latest/](https://wger.readthedocs.io/en/latest/)
Online Demo: [https://wger.de/zh-hans/software/features](https://wger.de/zh-hans/software/features)

Interactive Discussion
Discord: https://discord.gg/rPWFv6W
Mastodon: https://fosstodon.org/@wger
GitHub Issues:https://github.com/wger-project/wger/issues
Translation Community (Weblate):https://hosted.weblate.org/engage/wger/

高层次结构
仓库组织形式：wger使用了多仓库单项目的组织结构，即一个项目分布在多个专门的仓库中，每个仓库负责项目的不同组件。这种结构允许不同技术栈的开发者
专注在自己的领域中，保持项目的模块化和易于维护性。

仓库识别
  主仓库：wger-project/wger
  用途：包含项目的核心Django后端应用
  开发者访问原因：后端开发，API开发，数据模型定义，业务逻辑实现
  预期内容：Python/Django代码，数据库模型，REST API端点，部分前端组件

	移动端仓库：wegr-project/flutter
  用途：移动应用
  开发者访问原因：移动应用开发,UI/UX deisgns，移动端功能实现
  预期内容：Dart/Flutter代码，移动应用界面，API客户端实现
  
  Docker仓库
  用途：Docker Compose配置和部署脚本
  开发者访问原因：开发环境搭建，容器化配置
  预期内容：Docker配置文件，环境变量设置，部署文档

  文档仓库：wger-project/docs
  用途：项目文档
  开发者访问原因：文档编写，API文档更新，用户指南维护
  预期内容：reStructuredText文档。Sphinx配置，技术文档

  数据仓库：wger-project/data
  用途：原始数据和大型数据集
  开发者访问原因：数据库初始化，食材数据管理，测试数据准备
  预期内容：JSON/SQL数据文件，数据导入脚本

  前端仓库：wger-project/react
  用途：React前端
  开发者访问原因：前端开发，UI组件开发，用户界面优化
  预期内容：TypeScript/react代码，前端组件库
  
  仓库间关系
  各仓库通过明确定义的API接口和数据格式进行交互。
  主仓库提供REST API服务，移动应用和前端组件通过HTTP请求与后端通信。
  部署仓库整合所有组件，形成完整的应用程序栈。
  
项目架构
	总体架构概述：wger采用现代的微服务风格架构，基于Django的Model-View-Template（MVT）模式构建后端，
  结合RESTful API设计，支持多种客户端应用
  
核心技术栈
	后端技术
  核心框架：Django
  数据库支持：PostgreSQL,SQLite
  API框架：Django REST Framework
  缓存系统：Redis
  任务队列：Celery
