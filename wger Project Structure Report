wger Project Structure Report
Group Member Information:

Name: Simin Cheng, Student ID: 1663732, Email: sc1040@students.waikato.ac.nz
Name: Bai Lu, Student ID: 1671298, Email: ys677@students.waikato.ac.nz
Name: Ziqi Lin, Student ID: 1674249, Email: zl354@students.waikato.ac.nz
Name: Zhengrong Chen, Student ID: 1660321, Email: zc199@students.waikato.ac.nz

Project Overview

Project Name and Functionality

wger is an open-source fitness and nutrition management application that helps users plan, track, and analyse their workouts, diet, and progress. It combines workout planning, nutrition tracking, and basic gym management in one platform, available across multiple devices and deployment options.

Core Features
wger offers a comprehensive set of features designed to help users manage and track their fitness and nutrition goals.

On the dashboard, users can view their workout routine, nutrition plan, and body weight graph. All these can also be tracked using a built-in calendar.

Customizable Workout Plans
Users can create workout routines by defining the exercises, number of sets, weight, repetitions, and even supersets or automated progression rules. After completing a workout, they can record a detailed training log, including date, time, notes, overall impression, and specific exercise results (repetitions, weight, RIR). A log overview is also provided.

Workout routines can be downloaded or viewed in a table format, and users can create reusable templates. Body measurements can be tracked for any part of the body—for example, logging that an arm measures 26 cm today. A body weight overview allows users to add weight records, with statistics automatically displayed in both table and graph formats.

Nutrition Tracking
When adding a meal, users can enter an ingredient name and amount to view its nutrition information. The application tracks daily totals for protein, carbohydrates, and fat, and compares them with the user’s target goals.

Additional tools include a daily calorie calculator based on basal metabolic rate (BMR) and physical activity level, as well as a body mass index (BMI) calculator based on weight and height.

Exercise Wiki
A built-in exercise database lets users search by name or filter by muscle group, equipment, or category. Users can also contribute new exercise to the database.

Platform and Deployment
Wger is available as a cross-platform application for Android, iOS, F-Droid, and Flathub. It also supports self-hosted deployment via Docker, for full control.

Multilingual Support and Integrations
Wger supports 41 languages, with more than 60% already translated, thanks to community contributions via Weblate. A REST API is available for third-party integrations and automation.

Gym Management
Basic gym management features are included, enabling trainers and coaches to monitor their students’ progress, and allowing gym managers to keep track of member contracts. Members can be added, deactivated, or removed as needed.


License Information

The project has a multi-license structure:

Server Components and Mobile Code: GNU Affero General Public License 3.0 or later (AGPL-3.0+). 
Exercise/Food Data: Creative Commons Attribution Share-Alike 3.0 (CC-BY-SA 3.0).
Documentation: Creative Commons Attribution Share-Alike (CC-BY-SA 4.0).

Contribution Guidelines
link：https://wger.readthedocs.io/en/latest/contributing.html
Contributors are encouraged across different areas (code, translations, documentation).Contributing Guide provides specific guidelines such as using feature branches, writing good commit messages, testing changes, and code formatting.

Support Resources

Development – For developers working on the backend, frontend, or mobile app.
Documentation: [Development Guide](https://wger.readthedocs.io/en/latest/index.html#development)

Deployment – For fitness enthusiasts or gyms/fitness studios who want full control over their installation.
Documentation: [Installation & Production Guide](https://wger.readthedocs.io/en/latest/index.html#development)

Administration – For system administrators or technical staff managing a wger server.
Covers tasks such as managing the application, syncing exercises and ingredients, configuring settings, and setting up an authentication proxy (SSO).
Documentation: [Administration Guide](https://wger.readthedocs.io/en/latest/index.html#administration)

API – For developers using wger’s API, including public endpoints (e.g., list of exercises or ingredients) and user-owned objects (e.g., workout routines).
Suitable for syncing workout logs from IoT devices (e.g., smart scales, fitness trackers) or managing large user bases (e.g., gym chains).
Documentation: [API Guide](https://wger.readthedocs.io/en/latest/index.html#api)

Interactive Discussion – For anyone using wger to ask questions, share feedback, or discuss ideas.
Discord: [Join here](https://discord.gg/rPWFv6W)
Mastodon: [Follow here](https://fosstodon.org/@wger)


High-Level Structure
Repository Organization
Wger uses a multi-repository, single-project structure with 4 core specialized repositories, where a single project is distributed across multiple specialized repositories. Each repository is responsible for a different component of the project. This structure allows developers with different technical expertise to focus on their specific areas, keeping the project modular and easy to maintain.
The project includes additional repositories for Kubernetes deployment (helm-charts), Unraid support (unraid-templates), and other specialized tools.

Repository Identification
Backend Repository: wger-project/wger
Purpose: The Django-based REST API server and web backend of the project for managing workouts, nutrition plans, and body statistics.
Developer Access Reason:
-Implementing business logic, API endpoints, and data models
-Configuring server-side settings and deployments
-Adding new fitness exercises, nutrition data, or workout features
Expected Content: Python/Django code, database models, REST API endpoints, and some frontend components.

Frontend Repository: wger-project/react
Purpose: Contains the React components used in the wger web interface.
Developer Access Reason:
-Building web components
-Implementing UI patterns
-User interface optimization
Expected Content: TypeScript/React code and frontend component libraries.

Mobile Repository: wger-project/flutter
Purpose: A mobile application written in Flutter. Let users access the wger services on their mobile devices.
Developer Access Reason:
-Develop or maintain the mobile application
-Implementing responsive mobile interface
-Handling iOS/Android deployments
Expected Content: Dart/Flutter code, mobile app interface, and API client implementations.

Docker Repository: wger-project/docker
Purpose: Deploy the wger application using Docker.
Developer Access Reason:
-Set up production environments
-Create local development environments
Expected Content: Docker configuration files, environment variable settings, and instructions for building and running the application.

Project Architecture
Overall Architecture
wger is designed for simple self-hosting, with Docker being the primary and recommended deployment method. As stated in the README: ‘Hosting your own instance basically only requires a docker compose up -d.’
Although it is technically possible to run wger without containers, this makes the setup process very complicated. Therefore, using Docker provides the best setup and maintenance experience.
The system is built using Django's Model-View-Template (MVT) pattern, combined with RESTful API design, supporting various client applications.

Core Technology Stack
Backend
Core Framework: Python 3.10-3.13 with Django 5.2.3
API Endpoints: Django REST Framework 3.16.0
Data Support: PostgreSQL (production) / SQLite (development) - configurable choice 
Caching System: Redis
Background Processing: Celery 5.5.3
Web Server: Nginx(reverse proxy)
WSGI Server: Gunicorn 23.0.0

Front-end
UI Framework: Bootstrap 5.3.7
Interactive Enhancement: HTMX 2.0.5
JavaScript Library: jQuery 3.7.1
Build Tools: yarn@4.9.2, Sass compilation
Modern Components: React 19.1.0, TypeScript 5.8.2, Vite 6.3.5, ESLint 9.28.0
Package Management: Yarn workspaces with automated resource deployment

Mobile
Mobile Framework: Flutter (SDK >=3.0.0)
Supported Platforms: Android, iOS, Web, Flatpak
State Management: Provider 6.1.5 + Flutter Riverpod 2.6.1
Local Database: Drift 2.27.0
UI Components: Material Design + flex_color_scheme 8.1.1
Key Dependencies: 40+ libraries including fl_chart, http, font_awesome_flutter

Deployment
Containers: Docker, Docker Compose
Reverse Proxy: Nginx
Process Manager: Supervisor

Main Component Architecture

wger-project/wger Main Repository Architecture
Key Modules:
wger/: Django project root directory
  Contains the main Django configuration files (settings.py, urls.py, wsgi.py) 
  Entry point and global configuration for the project
config/: Project configuration management module
  Handling Environment Variables and Configuration Files 
  Managing Configuration Differences Across Environments
core/: Core module
  User authentication, rights management 
  Base model and generic functionality
exercises/: Exercise management module
  CRUD operations for exercise database
  Exercise classification, muscle group, equipment management
gallery/: Progress photo album
  Upload and storage management of user progress photos
gym/: Gym management module
  Basic information management for gyms
  Member management and permission allocation
locale/: Localization module
  Multilingual support and translation management
mailer/: Mail system module
  Email sending function
manager/: Management functions
  System administrator functions
measurements/: Body measurement data
  Recording and tracking of user physical indicators
nutrition/: Nutrition management 
  Food database management (based on Open Food Facts)
  Meal logging and nutrient calculation
  Macronutrient goal setting and tracking
software/: Software information 
  Application version information and update log
utils/: Utility functions
  General-purpose utility functions and helper classes

wger-project/flutter Mobile Architecture
Technical Features:
Uses the Dart programming language
Material Design language
REST API client implementation
Multi-platform support (Android, iOS, F-Droid, and Flathub)

Service Components 
Django application server
  Running the main wger Django app 
  Handling HTTP requests and API calls
nginx: Reverse proxy and static file server  
  Load balancing for HTTP/HTTPS requests
  Providing static file services (CSS, JavaScript, images)
db: PostgreSQL database
  Primary data storage, including user data, exercise data, and nutritional information
cache: Redis caching system
  Conversation storage and temporary data caching
  API response caching to improve performance
  Fast access to real-time data and frequently accessed data
celery_worker: Background task processor
  Processing background tasks
celery_beat: Scheduled task coordinator
  Manage scheduled tasks
  Perform periodic maintenance and data synchronisation
  Handle automated system maintenance operations

Key Features
RESTful design with standard HTTP methods (GET, POST, PUT, DELETE)
Authentication-based API access, users only access their own data
Pagination and filtering for handling efficient data

Development Environment
Option 1 — Docker (recommended for most cases).
1. Install Docker and Docker Compose. Clone the wger-project/docker repository. Edit the .env file.
2. Start with docker compose up and stop with docker compose down.
3. If frontend build fails with yarn: not found: the dev image is missing Yarn. In your dev Dockerfile, enable/install Yarn (e.g., enable Corepack or install Yarn directly) and submit a small PR explaining why it’s needed and what you changed.
Docker deployment (official): https://wger.readthedocs.io/en/latest/production/docker.html
Option 2 — Manual installation (for advanced customization).
1. Install dependencies: Python 3, PostgreSQL, Node.js, Yarn, Sass. Clone the wger-project/wger repository.
2.Create and activate a virtualenv with python -m venv venv and source venv/bin/activate. Install dependencies with pip install -e .. Collect resources with python manage.py collectstatic.
3.Start with python manage.py runserver.
4.From the relevant frontend directory, run yarn install and yarn dev.
- If you rely on the standalone react repo, do this in that repo.
- If you build static assets inside the Django repo, follow the main repo’s instructions.
- If Yarn is missing or the version mismatches, apply the Yarn handling noted above.
Manual installation (official): https://wger.readthedocs.io/en/latest/production/installation.html
