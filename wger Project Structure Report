wger Project Structure Report
Group Member Information:

Name: Simin Cheng, Student ID: 1663732, Email: sc1040@students.waikato.ac.nz
Name: Bai Lu, Student ID: 1671298, Email: ys677@students.waikato.ac.nz
Name: Ziqi Lin, Student ID: 1674249, Email: zl354@students.waikato.ac.nz
Name: Zhengrong Chen, Student ID: 1660321, Email: zc199@students.waikato.ac.nz

Project Overview

Project Name and Functionality

wger is a free, open-source fitness and nutrition manager designed to provide users with a fitness and nutrition solution for tracking their fitness journey. The project aims to solve multiple problems related to personal fitness and nutrition planning.
//修改项目概述  自托管的自由开源软件健身/锻炼、营养和体重跟踪器 去掉659  详细展开各部分功能



创建新功能前需要开启issue讨论
代码格式要求：
测试要求：
新功能需要写测试

Core Features
wger offers a comprehensive set of features designed to help users manage and track their fitness and nutrition goals.

On the dashboard, users can view their workout routine, nutrition plan, and body weight graph. All these can also be tracked using a built-in calendar.

Customizable Workout Plans
Users can create workout routines by defining the exercises, number of sets, weight, repetitions, and even supersets or automated progression rules. After completing a workout, they can record a detailed training log, including date, time, notes, overall impression, and specific exercise results (repetitions, weight, RIR). A log overview is also provided.

Workout routines can be downloaded or viewed in a table format, and users can create reusable templates. Body measurements can be tracked for any part of the body—for example, logging that an arm measures 26 cm today. A body weight overview allows users to add weight records, with statistics automatically displayed in both table and graph formats.

Nutrition Tracking
When adding a meal, users can enter an ingredient name and amount to view its nutrition information. The application tracks daily totals for protein, carbohydrates, and fat, and compares them with the user’s target goals.

Additional tools include a daily calorie calculator based on basal metabolic rate (BMR) and physical activity level, as well as a body mass index (BMI) calculator based on weight and height.

Exercise Wiki
A built-in exercise database lets users search by name or filter by muscle group, equipment, or category. Users can also contribute new exercise to the database.

Platform and Deployment
Wger is available as a cross-platform application for Android, iOS, F-Droid, and Flathub. It also supports self-hosted deployment via Docker, for full control.

Multilingual Support and Integrations
Wger supports 41 languages, with more than 60% already translated, thanks to community contributions via Weblate. A REST API is available for third-party integrations and automation.

Gym Management
Basic gym management features are included, enabling trainers and coaches to monitor their students’ progress, and allowing gym managers to keep track of member contracts. Members can be added, deactivated, or removed as needed.


License Information

The project has a multi-license structure:

Application Code: GNU Affero General Public License 3.0 or later.
Exercise/Food Data: Creative Commons Attribution Share-Alike 3.0 (CC-BY-SA 3.0).
Documentation: Creative Commons Attribution Share-Alike (CC-BY-SA 4.0).

Developer Code of Conduct and Contribution Guidelines

The project follows standard open-source community practices. Developers are welcome to contribute in various forms, including but not limited to code, translations, and exercise data.
//增加行为准则，贡献准则：贡献要求 非标准开源社区

Support Resources
//需要说明面向对象是谁？按用户类型分类支持资源，明确各资源的目标用户群体和用途，解决会议中提到的资源用途不明确问题

The project provides several support channels:

Official Documentation: https://wger.readthedocs.io/en/latest/
Online Demo: https://wger.de/zh-hans/software/features

Interactive Discussion
Discord: https://discord.gg/rPWFv6W
Mastodon: https://fosstodon.org/@wger
GitHub Issues:https://github.com/wger-project/wger/issues
Translation Community (Weblate):https://hosted.weblate.org/engage/wger/


High-Level Structure
Repository Organization
wger uses a multi-repository, single-project structure with 13 specialized repositories, where a single project is distributed across multiple specialized repositories. Each repository is responsible for a different component of the project. This structure allows developers with different technical expertise to focus on their specific areas, keeping the project modular and easy to maintain.
The project includes additional repositories for Kubernetes deployment (helm-charts), Unraid support (unraid-templates), and other specialized tools.

//Repository改成4个
Repository Identification
Main Repository: wger-project/wger
Purpose: This is the main server-side part of the project for managing workouts, nutrition plans, and body statistics.
Developer Access Reason: Backend development, API development, data model definition, and business logic implementation.
Expected Content: Python/Django code, database models, REST API endpoints, and some frontend components.

Mobile Repository: wger-project/flutter
Purpose: A mobile application written in Flutter. Let users access the wger services on their mobile devices.
Developer Access Reason:  to develop or maintain the mobile application, add new features, or fix bugs.
Expected Content: Dart/Flutter code, mobile app interface, and API client implementations.

Docker Repository: wger-project/docker
Purpose: defines how to deploy the wger application using Docker.
Developer Access Reason: test, develop, or production deployment of the application using Docker containers.
Expected Content: Docker configuration files, environment variable settings, and instructions for building and running the application.

Documentation Repository: wger-project/docs
Purpose: Project documentation.
Developer Access Reason: Writing documentation, updating API documentation, and maintaining user guides.
Expected Content: reStructuredText documents, Sphinx configuration, and technical documentation.

Data Repository: wger-project/data
Purpose: Raw and large datasets.
Developer Access Reason: Database initialization, food data management, and preparing test data.
Expected Content: JSON/SQL data files and data import scripts.

Frontend Repository: wger-project/react
Purpose: contains the React components used in the wger web interface.
Developer Access Reason: Frontend development, UI component development, and user interface optimization.
Expected Content: TypeScript/React code and frontend component libraries.

//添加官方文档引用，明确仓库间的实际交互方式
Inter-Repository Relationships
The repositories interact through well-defined API interfaces and data formats. The main repository provides REST API services, while the mobile and frontend components communicate with the backend via HTTP requests.
The Docker repository integrates all these components to form a complete application stack.
Project Architecture
Overall Architecture
wger uses a container-based architecture with six separate services. The backend is built on Django's Model-View-Template (MVT) pattern, combined with a RESTful API design, to support a variety of client applications.
//去掉基于container的部署形式，简述docker部署，说明非docker部署的困难

Core Technology Stack
Backend Technologies

Core Framework: Django
Database Support: PostgreSQL, SQLite
API Framework: Django REST Framework
Caching System: Redis
Task Queue: Celery
Web Server:Nginx(reverse proxy)
WSGI Server:Gunicorn

Front-end
UI Framework: Bootstrap 
Interactive Enhancement: HTMX 
JavaScript Library: jQuery 
Build Tools: Yarn, Sass compilation
Modern Components: React with TypeScript, Vite, ESLint
Package Management: Yarn workspaces with automated resource deployment

Mobile
Mobile Framework: Flutter 
Supported Platforms: Android, iOS, Web, Flatpak
State Management: Provider  + Flutter Riverpod 
Local Database: Drift 
UI Components: Material Design + flex_color_scheme 
Key Dependencies: 40+ libraries including fl_chart, http, font_awesome_flutter

Deployment
Containers: Docker, Docker Compose
Reverse Proxy: Nginx
Process Manager: Supervisor

//各模块功能详细说明
Main Component Architecture

wger-project/wger Main Repository Architecture
Key Modules:
wger/: Django project root directory
config/: Project configuration management module
core/: Core module
exercises/: Exercise management module
gallery/: Progress photo album
gym/: Gym management module
locale/: Localization module
mailer/: Mail system module
manager/: Management functions
measurements/: Body measurement data
nutrition/: Nutrition management
software/: Software information
utils/: Utility functions

//说明各个版本号
Development Tools
Python: Main programming language
Node.js: Front-end assets
npm: JS package manager
virtualenv: Python virtual environment

wger-project/flutter Mobile Architecture
Technical Features:
Uses the Dart programming language
Material Design language
REST API client implementation
Multi-platform support (Android, iOS, F-Droid, and Flathub)

//说明模块结构的一致性，用途说明
Core Modules:
User authentication and registration
Workout plans
Nutrition plans
Progress tracking
Offline data

wger-project/docker Deployment Architecture
Complete Docker deployment solution
Deployment Environments
Production environment configuration (prod)
Development environment configuration (dev)
PostgreSQL development environment

Service Components
Django application server
nginx: Reverse proxy and static file server  
db: PostgreSQL database
cache: Redis caching system
celery_worker: Background task processor
celery_beat: Scheduled task coordinator

API Architecture and Component Integration
RESTful API v2 built with Django REST Framework
Base URL: /api/v2/
Authentication:JWT tokens（suggested）or API Token
Data Format: JSON input/output
Documentation: /api/v2/schema/ui (Swagger UI) or /api/v2/schema/redoc (ReDoc)

//缺少API到代码的映射关系
API endpoint Module Structure
1.Core Module (wger/wger/core/api/views.py)
/userprofile/ for the user profile

2.Manager Module（wger/wger/manager/api/views.py）
/routine/ for routine objects
/workoutlog/ for workout log objects
/workoutsession/ for workout sessions objects
/templates/ for routine template objects

3.Exercises Module (wger/wger/exercises/api/views.py)
/exercise/ for exercise objects.
/exerciseinfo/ Read-only info for exercise objects

4.Nutrition Module (wger/wger/nutrition/api/views.py)
/ingredient/ for ingredient objects
/ingredientinfo/ Read-only info for ingredient objects
/nutritionplan/ for nutrition plan objects
/meal/ for meal objects
/nutritiondiary/ for a meal log item

5.Weight Module (wger/wger/weight/api/views.py)
/weightentry/ for weight tracking

6.Measurements Module (wger/wger/measurements/api/views.py)
/measurement/ for body measurements

7.Gallery Module （wger/wger/gallery/api/views.py）
/gallery/ for gallery image

Key Features
RESTful design with standard HTTP methods (GET, POST, PUT, DELETE)
Authentication-based API access, users only access their own data
Pagination and filtering for handling efficient data

//添加文件路径
Data Model Architecture
Modular Design (exercises application)
base.py: Abstract base models
category.py: Exercise categorization
equipment.py: Fitness equipment management
muscle.py: Muscle group classification
image.py, video.py: Media resource management
translation.py: Multi-language support
deletion_log.py: Data audit trail

//增加已知部署问题和解决方案
Development Environment
Option 1 — Docker (recommended for most cases).
Install Docker and Docker Compose. Clone the wger-project/docker repository. Edit the .env file.
Start with docker compose up and stop with docker compose down.
Option 2 — Manual installation (for advanced customization).
Install dependencies: PostgreSQL, Node.js, Yarn, Sass. Clone the wger-project/wger repository.
Create and activate a virtualenv with python -m venv venv and source venv/bin/activate. Install dependencies with pip install -e .. Collect resources with python manage.py collectstatic. Start with python manage.py runserver.
