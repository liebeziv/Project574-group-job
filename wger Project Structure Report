wger Project Structure Report
Group Member Information:

Name: Simin Cheng, Student ID: 1663732, Email: sc1040@students.waikato.ac.nz
Name: Bai Lu, Student ID: 1671298, Email: ys677@students.waikato.ac.nz
Name: Ziqi Lin, Student ID: 1674249, Email: zl354@students.waikato.ac.nz
Name: Zhengrong Chen, Student ID: 1660321, Email: zc199@students.waikato.ac.nz

Project Overview

Project Name and Functionality

wger is a free, open-source fitness and nutrition manager designed to provide users with a fitness and nutrition solution for tracking their fitness journey. The project aims to solve multiple problems related to personal fitness and nutrition planning.

Core Features

wger offers the following main features to its users:
on dashboard user can see the workout routine, nutrition plan and Weight graph.
also, user can trach above in calender.

Customizable Workout Plans: 
create workout routines-including define what exercise,how many sets,how much weight,how many repetitions,also superset and automated progression rule.
after workout, user can record training log-date,time,notes,impression, specific exercise results(repetitions, weight, rir). log overview is provided.
user can download routine or see it in table view,create template.
user can log the measurment of whatever part of body they want, like today, arm ,26cm.
also got body weight overview where uers can add weight record and a table and graph will automaticaly show the statics.

about nutrition:
when add a meal user can input ingredient name and amount. it will show it's Macronutrient infomation and energy.
tell user goal of Protein,Carbohydrates and Fat,and show total Macronutrient infomation and energy after logged.


provide Daily calories calculator based on Basal metabolic rate and Physical activities. provide BMI(Body Mass Index）) calculator based on weight and height.

Exercise Wiki: provide a  built-in exercise database which user can search by name or filter by muscle/equipment/category. user can contrbute to it.

Cross-Platform Applications: Available on Android, iOS, F-Droid, and Flathub.
Self-Hosted Deployment: Use Docker to deploy the application and maintain control over your data.

Multilingual Support: Community-translated through Weblate, already got 41 language ,more than 60% of them are translated.
get REST API for third-party integrations or automations.

Includes basic gym management features managing both gyms and members
 For example, trainers/coaches can follow their students progress, and gym managers are able to keep track of their members contracts. add members,deactivate  delete,members


License Information

The project has a multi-license structure:

Application Code: GNU Affero General Public License 3.0 or later.
Exercise/Food Data: Creative Commons Attribution Share-Alike 3.0 (CC-BY-SA 3.0).
Documentation: Creative Commons Attribution Share-Alike (CC-BY-SA 4.0).

Developer Code of Conduct and Contribution Guidelines
(doesn;t have a Code of Conduct)
The project follows standard open-source community practices. Developers are welcome to contribute in various forms, including but not limited to code, translations, and exercise data.

Support Resources

The project provides several support channels:

Official Documentation: https://wger.readthedocs.io/en/latest/
Online Demo: https://wger.de/zh-hans/software/features

Interactive Discussion
Discord: https://discord.gg/rPWFv6W
Mastodon: https://fosstodon.org/@wger
GitHub Issues:https://github.com/wger-project/wger/issues
Translation Community (Weblate):https://hosted.weblate.org/engage/wger/


High-Level Structure
Repository Organization
wger uses a multi-repository, single-project structure with 13 specialized repositories, where a single project is distributed across multiple specialized repositories. Each repository is responsible for a different component of the project. This structure allows developers with different technical expertise to focus on their specific areas, keeping the project modular and easy to maintain.
The project includes additional repositories for Kubernetes deployment (helm-charts), Unraid support (unraid-templates), and other specialized tools.

Repository Identification
Main Repository: wger-project/wger
Purpose: This is the main server-side part of the project for managing workouts, nutrition plans, and body statistics.
Developer Access Reason: Backend development, API development, data model definition, and business logic implementation.
Expected Content: Python/Django code, database models, REST API endpoints, and some frontend components.

Mobile Repository: wger-project/flutter
Purpose: A mobile application written in Flutter. Let users access the wger services on their mobile devices.
Developer Access Reason:  to develop or maintain the mobile application, add new features, or fix bugs.
Expected Content: Dart/Flutter code, mobile app interface, and API client implementations.

Docker Repository: wger-project/docker
Purpose: defines how to deploy the wger application using Docker.
Developer Access Reason: test, develop, or production deployment of the application using Docker containers.
Expected Content: Docker configuration files, environment variable settings, and instructions for building and running the application.

Documentation Repository: wger-project/docs
Purpose: Project documentation.
Developer Access Reason: Writing documentation, updating API documentation, and maintaining user guides.
Expected Content: reStructuredText documents, Sphinx configuration, and technical documentation.

Data Repository: wger-project/data
Purpose: Raw and large datasets.
Developer Access Reason: Database initialization, food data management, and preparing test data.
Expected Content: JSON/SQL data files and data import scripts.

Frontend Repository: wger-project/react
Purpose: contains the React components used in the wger web interface.
Developer Access Reason: Frontend development, UI component development, and user interface optimization.
Expected Content: TypeScript/React code and frontend component libraries.

Inter-Repository Relationships
The repositories interact through well-defined API interfaces and data formats. The main repository provides REST API services, while the mobile and frontend components communicate with the backend via HTTP requests.
The Docker repository integrates all these components to form a complete application stack.
Project Architecture
Overall Architecture
wger uses a container-based architecture with six separate services. The backend is built on Django's Model-View-Template (MVT) pattern, combined with a RESTful API design, to support a variety of client applications.

Core Technology Stack
Backend Technologies

Core Framework: Django
Database Support: PostgreSQL, SQLite
API Framework: Django REST Framework
Caching System: Redis
Task Queue: Celery
Web Server:Nginx(reverse proxy)
WSGI Server:Gunicorn

Front-end
UI Framework: Bootstrap 
Interactive Enhancement: HTMX 
JavaScript Library: jQuery 
Build Tools: Yarn, Sass compilation
Modern Components: React with TypeScript, Vite, ESLint
Package Management: Yarn workspaces with automated resource deployment

Mobile
Mobile Framework: Flutter 
Supported Platforms: Android, iOS, Web, Flatpak
State Management: Provider  + Flutter Riverpod 
Local Database: Drift 
UI Components: Material Design + flex_color_scheme 
Key Dependencies: 40+ libraries including fl_chart, http, font_awesome_flutter

Deployment
Containers: Docker, Docker Compose
Reverse Proxy: Nginx
Process Manager: Supervisor


Main Component Architecture

wger-project/wger Main Repository Architecture
Key Modules:
wger/: Django project root directory
config/: Project configuration management module
core/: Core module
exercises/: Exercise management module
gallery/: Progress photo album
gym/: Gym management module
locale/: Localization module
mailer/: Mail system module
manager/: Management functions
measurements/: Body measurement data
nutrition/: Nutrition management
software/: Software information
utils/: Utility functions

Development Tools
Python: Main programming language
Node.js: Front-end assets
npm: JS package manager
virtualenv: Python virtual environment

wger-project/flutter Mobile Architecture
Technical Features:
Uses the Dart programming language
Material Design language
REST API client implementation
Multi-platform support (Android, iOS, F-Droid, and Flathub)

Core Modules:
User authentication and registration
Workout plans
Nutrition plans
Progress tracking
Offline data

wger-project/docker Deployment Architecture
Complete Docker deployment solution
Deployment Environments
Production environment configuration (prod)
Development environment configuration (dev)
PostgreSQL development environment

Service Components
Django application server
nginx: Reverse proxy and static file server  
db: PostgreSQL database
cache: Redis caching system
celery_worker: Background task processor
celery_beat: Scheduled task coordinator

wger-project/API
RESTful API v2 built with Django REST Framework
Base URL: /api/v2/
Authentication:JWT tokens（suggested）or API Token
Data Format: JSON input/output
Documentation: /api/v2/schema/ui (Swagger UI) or /api/v2/schema/redoc (ReDoc)

API Module Structure
/api/v2/
|- routine/      # Workout routines
|- exercise/     # Exercise database
|- workoutlog/   # Workout logs
|- ingredient/   # Nutrition ingredients
|- meal/         # Meal planning
|- userprofile/  # User profiles
|- weightentry/  # Weight tracking

Key Features
RESTful design with standard HTTP methods (GET, POST, PUT, DELETE)
Authentication-based API access, users only access their own data
Pagination and filtering for handling efficient data

Data Model Architecture
Modular Design (exercises application)
base.py: Abstract base models
category.py: Exercise categorization
equipment.py: Fitness equipment management
muscle.py: Muscle group classification
image.py, video.py: Media resource management
translation.py: Multi-language support
deletion_log.py: Data audit trail

Development Environment
Option 1 — Docker (recommended for most cases).
Install Docker and Docker Compose. Clone the wger-project/docker repository. Edit the .env file.
Start with docker compose up and stop with docker compose down.
Option 2 — Manual installation (for advanced customization).
Install dependencies: PostgreSQL, Node.js, Yarn, Sass. Clone the wger-project/wger repository.
Create and activate a virtualenv with python -m venv venv and source venv/bin/activate. Install dependencies with pip install -e .. Collect resources with python manage.py collectstatic. Start with python manage.py runserver.
