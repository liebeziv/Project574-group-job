wger Project Structure Report
Group Member Information:

Name: Simin Cheng, Student ID: 1663732, Email: sc1040@students.waikato.ac.nz
Name: Bai Lu, Student ID: 1671298, Email: ys677@students.waikato.ac.nz
Name: Ziqi Lin, Student ID: 1674249, Email: zl354@students.waikato.ac.nz
Name: Zhengrong Chen, Student ID: 1660321, Email: zc199@students.waikato.ac.nz

Project Overview

Project Name and Functionality

wger is a free, open-source fitness and nutrition manager designed to provide users with a comprehensive solution for tracking their fitness journey. The project aims to solve multiple problems related to personal fitness and nutrition planning.

 Core Features

wger offers the following main features to its users:

Customizable Workout Plans: Create flexible workout routines with automated progression rules.
Metric Tracking: Log and track diet plans, body weight, and custom measurement data.
Nutrition Management: Log calorie intake using the Open Food Facts database.
Exercise Encyclopedia: A built-in exercise database.
Cross-Platform Applications: Available on Android, iOS, F-Droid, and Flathub.
Self-Hosted Deployment: Use Docker to deploy the application and maintain control over your data.
Multilingual Support: Community-translated through Weblate.
API: A REST API that supports third-party integrations and automation.
Gym Management: Includes basic gym management functionalities.

License Information

The project has a multi-license structure:

Application Code: GNU Affero General Public License 3.0 or later.
Exercise/Food Data: Creative Commons Attribution Share-Alike 3.0 (CC-BY-SA 3.0).
Documentation: Creative Commons Attribution Share-Alike (CC-BY-SA 4.0).

Developer Code of Conduct and Contribution Guidelines

The project follows standard open-source community practices. Developers are welcome to contribute in various forms, including but not limited to code, translations, and exercise data.

Support Resources

The project provides several support channels:

Official Documentation: https://wger.readthedocs.io/en/latest/
Online Demo: https://wger.de/zh-hans/software/features

Interactive Discussion
Discord: https://discord.gg/rPWFv6W
Mastodon: https://fosstodon.org/@wger
GitHub Issues:https://github.com/wger-project/wger/issues
Translation Community (Weblate):https://hosted.weblate.org/engage/wger/


High-Level Structure
Repository Organization
wger uses a multi-repository, single-project structure, where a single project is distributed across multiple specialized repositories. Each repository is responsible for a different component of the project. This structure allows developers with different technical expertise to focus on their specific areas, keeping the project modular and easy to maintain.

Repository Identification
Main Repository: wger-project/wger
Purpose: Contains the core Django backend application.
Developer Access Reason: Backend development, API development, data model definition, and business logic implementation.
Expected Content: Python/Django code, database models, REST API endpoints, and some frontend components.

Mobile Repository: wger-project/flutter
Purpose: The mobile application.
Developer Access Reason: Mobile app development, UI/UX design, and mobile-specific feature implementation.
Expected Content: Dart/Flutter code, mobile app interface, and API client implementations.

Docker Repository: wger-project/docker
Purpose: Docker Compose configuration and deployment scripts.
Developer Access Reason: Setting up the development environment and containerization configuration.
Expected Content: Docker configuration files, environment variable settings, and deployment documentation.

Documentation Repository: wger-project/docs
Purpose: Project documentation.
Developer Access Reason: Writing documentation, updating API documentation, and maintaining user guides.
Expected Content: reStructuredText documents, Sphinx configuration, and technical documentation.

Data Repository: wger-project/data
Purpose: Raw and large datasets.
Developer Access Reason: Database initialization, food data management, and preparing test data.
Expected Content: JSON/SQL data files and data import scripts.

Frontend Repository: wger-project/react
Purpose: The React frontend.
Developer Access Reason: Frontend development, UI component development, and user interface optimization.
Expected Content: TypeScript/React code and frontend component libraries.

Inter-Repository Relationships
The repositories interact through well-defined API interfaces and data formats. The main repository provides REST API services, while the mobile and frontend components communicate with the backend via HTTP requests.
The Docker repository integrates all these components to form a complete application stack.
Project Architecture
Overall Architecture
wger uses a modern, microservices-style architecture. The backend is built on Django's Model-View-Template (MVT) pattern, combined with a RESTful API design, to support a variety of client applications.

Core Technology Stack
Backend Technologies

Core Framework: Django
Database Support: PostgreSQL, SQLite
API Framework: Django REST Framework
Caching System: Redis
Task Queue: Celery
Web Server:Nginx(reverse proxy)
WSGI Server:Gunicorn

Front-end
Traditional Front-end: HTML, CSS, JavaScript, jQuery
Charting Library: D3.js
Modern Front-end: React, TypeScript

Mobile
Mobile Framework: Flutter
Supported Platforms: iOS, Android

Deployment
Containers: Docker, Docker Compose
Reverse Proxy: Nginx
Process Manager: Supervisor


Main Component Architecture

wger-project/wger Main Repository Architecture
Key Modules:
wger/: Django project root directory
config/: Project configuration management module
core/: Core module
exercises/: Exercise management module
gallery/: Progress photo album
gym/: Gym management module
locale/: Localization module
mailer/: Mail system module
manager/: Management functions
measurements/: Body measurement data
nutrition/: Nutrition management
software/: Software information
utils/: Utility functions

Development Tools
Python: Main programming language
Node.js: Front-end assets
npm: JS package manager
virtualenv: Python virtual environment

wger-project/flutter Mobile Architecture
Technical Features:
Uses the Dart programming language
Material Design language
REST API client implementation
Multi-platform support (iOS, Android, web, Linux, macOS, Windows, Flatpak)

Core Modules:
User authentication and registration
Workout plans
Nutrition plans
Progress tracking
Offline data
 

部署架构（docker）（未完成）
参考架构：部署环境，服务组件

API架构（未完成）
参考架构：API特性，API端点

数据架构（未完成）
参考架构：数据实体内容

开发环境（未完成）
参考架构：多环境开发

