Group Member Information:

Name: Simin Cheng, Student ID: 1663732, Email: sc1040@students.waikato.ac.nz
Name: Bai Lu, Student ID: 1671298, Email: ys677@students.waikato.ac.nz
Name: Ziqi Lin, Student ID: 1674249, Email: zl354@students.waikato.ac.nz
Name: Zhengrong Chen, Student ID: 1660321, Email: zc199@students.waikato.ac.nz
1. Project Review1.1 Systematic Issues IdentifiedIssue 1 - WorkoutLog Uses Naive TimestampLocation: wger/manager/models/log.py:43Risk: default=datetime.datetime.now returns a naive datetime. With USE_TZ=True, all log entries are stored in server time, so users in other time zones observe incorrect ordering and "future" timestamps. This undermines the reliability of workout histories and any analytical dashboards.Recommended fix: Import timezone from Django and switch to default=timezone.now. Also audit helper scripts such as wger/tasks.py to ensure no other naive datetimes remain.Expected impact: Ensures workout logs reflect true chronological order for all regions, which is critical for international users and downstream analytics (e.g., weekly summaries, reminder triggers).Issue 2 - WorkoutLog.str Always Displays "kg"Location: wger/manager/models/log.py:128Risk: The string representation concatenates "kg" even when the stored unit is pounds, kilometers per hour, etc. Administrators reviewing logs in Django admin or CSV exports see values labelled "kg" regardless of the real unit, potentially leading to incorrect coaching decisions.Recommended fix: Derive the unit label from self.weight_unit (or fall back to WeightUnit.name). Provide graceful placeholders ("—") when weight is missing.Expected impact: Accurate, unit-aware strings make logs trustworthy for both metric and imperial users and reduce support tickets related to mismatched units.Issue 3 - Day Lacks (routine, order) Unique ConstraintLocation: wger/manager/models/day.py:30Risk: Although order has an index, the database allows duplicate day orders within the same routine. If two days share the same order, downstream code (API serializers, front-end renderers) receives an unpredictable sequence.Recommended fix: Introduce models.UniqueConstraint(fields=['routine', 'order'], name='unique_day_order_per_routine') in a migration, and ship a one-off data cleaner that picks the lowest unused order for duplicates.Expected impact: Guarantees deterministic ordering at the persistence layer, which simplifies front-end logic and prevents schedule confusion.Issue 4 - RepetitionUnit Relies on Magic IDsLocation: wger/core/models/rep_unit.py:41 (return self.id == 1)Risk: Logic assumes ID 1 always maps to "Repetitions". If fixtures or database migrations ever reorder IDs (e.g., when seeding a new environment), all conditional paths depending on this check break silently.Recommended fix: Add an immutable code (e.g., "repetitions", "minutes") to RepetitionUnit, populate it in a migration, and compare against this semantic field. Alternatively, expose constants from manager.consts.Expected impact: Removes a fragile dependency on fixture order, improves readability, and supports future units (calories, distance) without hidden assumptions.Issue 5 - Routine.dayDataCurrentIteration Lacks Front-end SortingLocation: wger-react/src/components/WorkoutRoutines/models/Routine.tsRisk: The getter filters by iteration but returns items in the same order as received from the API. When the backend returns days in an unexpected order (e.g., locale-specific start day), the UI mirrors that incorrect sequence, producing the exact bug reported in Issue #1980 (e.g., Sunday appearing first).Recommended fix: Copy the filtered array and sort by day.order, then by date and day.id as tiebreakers. Add a unit test to verify ordering for mixed data sets. Note in the contribution guide that front-end fixes must land in the React source repository.Expected impact: Delivers predictable weekday ordering for all clients, ensures future contributors can easily audit and extend the logic, and prevents regressions in newly built bundles.1.2 Positive Design ChoicesMeta-ordering and Indexes in ModelsExample: Day.Meta.ordering = ['order'] with order indexed.Benefit: Databases return sorted rows directly, reducing ORM overhead. This is a best practice for read-heavy workloads (e.g., dashboards). Particularly in PostgreSQL, B-tree indexes can directly support ORDER BY operations, avoiding additional sorting steps.Developer impact: Query code remains concise—no repetitive order_by(). For instance, Day.objects.filter(routine=r) automatically returns sorted results without needing Day.objects.filter(routine=r).order_by('order'), reducing error potential. Performance remains consistent even with large routines.Centralized React View HandlingExample: wger/core/views/react.ReactView encapsulates authentication checks, template selection, and Shadow DOM exceptions.Benefit: Enforces DRY principles and standardizes the bootstrap process for every React page. All React pages share the same security checks, CSRF token handling, and initial data injection logic. When authentication logic needs modification or new security headers are added, only one place needs updating.Developer impact: Onboarding new screens requires less boilerplate. New developers only need to inherit ReactView and override get_context_data() to create new pages, without understanding the underlying Shadow DOM compatibility handling. Bugs in the base view fix all consumers simultaneously.Use of Dataclasses for Template-ready DataExample: wger/manager/dataclasses.SlotData aggregates data for templates.Benefit: Separates data marshalling from presentation, making the Python layer responsible for shape transformations. Dataclasses provide automatic __init__, __repr__, and __eq__ methods, reducing boilerplate. Type annotations make data structures clear, and IDEs can provide accurate autocomplete.Developer impact: Templates remain clean—using {{ slot.start_time }} instead of {{ slot.0.1.time }} greatly improves readability. View tests can validate structure via dataclasses. Unit tests can directly construct SlotData instances for testing without mocking complex model relationships. IDE type hints remain accurate throughout the development process.2. Contribution SummaryIssue #1980 - Fix Workout Day Ordering Issue [Zhengrong Chen]

Repository: https://github.com/liebeziv/wger/tree/fix-training-day-order
Pull Request: https://github.com/wger-project/wger/pull/2050
Problem: Training days occasionally rendered out of order (Monday after Wednesday), especially for locales where the backend returns Sunday as first element.Actual development process: Initially thought it was a CSS issue, tried adjusting display order with CSS order property, but realized this was only visual modification—the data order itself was wrong. Then considered fixing at the backend API level, but this required modifying multiple endpoints with too large an impact. Next attempted directly modifying wger/core/static/react/main.js, finding the dayDataCurrentIteration location in the compressed code and adding .slice().sort(...) logic. Local testing indeed solved the problem, excitedly submitted PR #2050. It was rejected—maintainer pointed out shouldn't modify compiled files. Only then realized React code has a separate source repository. After finding wger-react repository, reimplemented in src/components/WorkoutRoutines/models/Routine.ts, designing a stable comparator: first by day.order, then by date, finally by day.id as tiebreaker. This process took two weeks, mainly wasted understanding the project's build pipeline.Maintainer interaction: After submitting PR #2050, received no direct maintainer reply. From closed PR status, inferred the issue was modifying compiled bundle rather than source code. Currently reimplementing fix in React source repository.Outcome: Rejected - fix reworked in source repo with pending PR.Issue #2019 - Implement Calories Burned Feature [Zhengrong Chen]

Repository: https://github.com/liebeziv/wger/tree/feature-calories
Pull Request: Not yet submitted
Problem: Users want workouts to auto-compute calories and sync with nutrition plans.Actual development process: Started thinking it was simple—just add a "Calories" unit to RepetitionUnit table. Added REP_UNIT_CALORIES = 3 in wger/manager/consts.py, then wrote migration script to insert new record. Testing revealed the problem: calories aren't fixed values like weight, same exercise burns differently for different people. Started redesigning, realized need: an ExerciseCalorieData model storing base burn rates for each exercise; calculations adjusted by user weight and age; integration with nutrition plans. Wrote extensive design documentation, using bilingual (fearing unclear expression) description in the issue. Maintainer replied automatic calculation too complex, accuracy hard to guarantee, suggested considering smartwatch sync. Now stuck—have model definitions and migration scripts locally, but haven't figured out core calculation service. Considering whether to implement simple version first (manual calorie input), then gradually add automatic calculation.Maintainer interaction: Proposed complete implementation plan in issue #2019. Maintainer @rolandgeider replied: "adding kcal as units for workouts is a good idea" but expressed concerns about automatic calculations, noting need to add data for each exercise in database and uncertainty about accuracy. He suggested considering smartwatch sync (issue #618) as more precise alternative.Outcome: In development - backend models and migration scaffold exist locally.Issue #1112 - Improve Exercise Search Functionality [Bai Lu]

Repository: https://github.com/vilanell000/react
Pull Requests: #1105, #1117
Problem: Search results inaccurate for special-character or non-English exercise names.Actual development process: Users complained couldn't find exercises like "Hähnchenbrust" (German for chicken breast) with special characters. Initially tried handling special characters with regex, wrote bunch of replacement rules, testing showed this broke searches in other languages. Researched fuzzy search algorithms, decided on edit distance (Levenshtein distance). First version tested in personal fork (vilanell000/react), threshold set too wide, searching "run" returned irrelevant results like "sun", "fun". Adjusted algorithm, added language-aware normalization. PR #1105 implementing basic functionality was merged. Then in PR #1117 wanted to add save button visual feedback, made it red flashing effect. Maintainer said "too much", suggested more subtle approach—disable button, show ✅, use FormQueryErrors for errors. Reworked UI three times based on feedback.Maintainer interaction: In PR #1117 implemented save button visual feedback, maintainer @rolandgeider commented: "Adding some feedback is definitely a good idea" but suggested red button was "too much", recommended disabling button during query, showing ✅ on success, and using FormQueryErrors component for errors. Adjusted implementation based on feedback.Outcome: Partially merged - basic fuzzy search is live (PR #1105), advanced tuning awaiting review (PR #1117).

Issue #1108 - Nutrition Table Precision Issue [Simin Cheng]
Repository: https://github.com/simin-ch/react/tree/nutrition-precision-feature
Pull Request: In preparation
Problem: Nutritional totals rounded prematurely, causing visible discrepancies between expected and displayed values.Actual development process: User reported nutrition sums wrong: individual protein, fat, and fiber values didn't add up to the displayed totals. After debugging, found src/utils/numbers.ts numberUnitLocale function set maximumFractionDigits: 0, each value rounded to integer before adding. First reaction was directly change to show decimals, but this would show decimals everywhere, making interface messy. Thought users should choose—enable when precision needed, keep integers otherwise. Implementation divided into six steps: first modified numberGramLocale function to accept precision parameter; added toggle buttons to each table (using useState); discovered each component state independent, not synced; switched to React Context for global state; added localStorage persistence; extracted reusable PrecisionToggleButton component. Process repeated many times, especially after discovering issue in step 3, almost rewrote all related components.Maintainer interaction: Detailed rounding-induced calculation inaccuracy in issue #1108, awaiting maintainer feedback.Outcome: In development - awaiting documentation polish before submission
.Issue #1115 - Meal Form Timepicker Fix [Simin Cheng]
Repository: https://github.com/simin-ch/react/tree/fix-timepicker-bug
Pull Request: https://github.com/wger-project/react/pull/1116
Problem: "Add Meal" form couldn't properly edit meal time due to incompatible DateTime objects.Actual development process: When adding meal, time picker clicked but no response. Compared the implementation with other TimePicker usage patterns in the codebase and examined the author's comments in MealForm.tsx, found TimePicker component returns Luxon DateTime object, but Formik expects JavaScript Date object. Type mismatch caused Formik to ignore update. Fix was simple—convert the Luxon DateTime to JS Date in onChange: newValue.toJSDate(). When submitting PR, maintainer happened to be online, merged in 5 minutes.Maintainer interaction: When submitting PR #1116, explained root cause: Formik expects JS Date but received Luxon DateTime. Maintainer @rolandgeider responded quickly: "I had barely seen your original issue and you directly open this PR 😄" and merged the fix 5 days ago.Outcome: Merged - deployed to production.Issue #2040 - Language Dropdown Overflow on Small Screens [Ziqi Lin]

Repository: https://github.com/Carner-Lin/wger/tree/language-dropdown
Pull Request: https://github.com/wger-project/wger/pull/2042
Problem: Footer language selector extends beyond viewport, preventing access to top entries.Actual development process: Testing on phone discovered language selector opened but top languages invisible and unclickable. Initially thought z-index issue, adjusted for long time without effect. Using Chrome DevTools device emulator, carefully observed dropdown exceeded viewport but had no scrollbar. Tried several solutions: reduce displayed languages—product rejected; display in two columns—still overflowed on ultra-small screens; final solution: limit max height + internal scrolling. Encountered issue writing CSS: scrolling triggered page scroll (scroll penetration). Added overscroll-behavior: contain to solve. Final CSS simple, but trial-and-error process long.Maintainer interaction: PR #2042 submitted awaiting review, no maintainer feedback yet.Outcome: Awaiting review.Issue - Prevent Negative Height Values in Preferences [Ziqi Lin]

Repository: https://github.com/Carner-Lin/wger/tree/Height-limit
Pull Request: https://github.com/wger-project/wger/pull/2030
Problem: Height spinner accepts negative numbers.Actual development process: Accidentally discovered while testing other features—height input allowed -180cm. Thought this was simple fix, directly add min="0". Testing found just adding min insufficient, users could still manually type negatives. Need to set simultaneously: type="number" (enable number input mode), min="0" (set minimum value), step="1" (set step value). This way browser automatically validates and shows "must be ≥ 0" prompt. Though minor issue, demonstrates importance of HTML5 form validation.Maintainer interaction: PR #2030 awaiting review, no maintainer response yet.Outcome: Awaiting review.Issue #1120 - Routine Page Thumbnails Overlapping Text [Ziqi Lin]

Repository: https://github.com/Carner-Lin/react/tree/routine-layout-fixes
Pull Request: https://github.com/wger-project/react/pull/1121
Problem: At narrow widths, exercise thumbnails overlap descriptions.Actual development process: In iPad portrait mode, exercise thumbnails float over text. Initially thought float issue, changing to flexbox still problematic. Using Grid Inspector analyzed layout, found responsive breakpoint issue: wide screen—image fixed width, text adaptive; narrow screen—image width starts shrinking, but min-width causes text squeeze. Tried several solutions, finally used non-wrapping flex container + fixed image column width + text column allowed to shrink combination. Tested across various device widths, ensuring image always left, text right with automatic wrapping.Maintainer interaction: Issue #1120 and PR #1121 awaiting review, no specific maintainer feedback yet.Outcome: Awaiting review.3. Lessons LearnedSubmit changes to the right repository - The workout ordering fix was initially applied to the compiled JavaScript bundle. Maintainers rightly rejected it and clarified that all React changes must be proposed in the wger-react repository. This experience highlighted the importance of understanding build pipelines before submitting patches.Design communication matters - For the calorie automation feature, presenting a bilingual, structured plan made it easier for maintainers to give feedback. Even though the feature is still under development, aligning ideas early prevented significant rework.Incremental wins build trust - Bai Lu's fuzzy search enhancement shows that shipping a smaller improvement first (PR #1105) establishes confidence, making maintainers more receptive to follow-up PRs with deeper changes.Testing and reproducibility go hand-in-hand - For front-end layout fixes (language dropdown, routine thumbnails), attaching screenshots and responsive design notes reduced ambiguity and built reviewer confidence without requiring them to reproduce the environment manually.
