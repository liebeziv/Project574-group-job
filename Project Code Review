Group Member Information:

Name: Simin Cheng, Student ID: 1663732, Email: sc1040@students.waikato.ac.nz
Name: Bai Lu, Student ID: 1671298, Email: ys677@students.waikato.ac.nz
Name: Ziqi Lin, Student ID: 1674249, Email: zl354@students.waikato.ac.nz
Name: Zhengrong Chen, Student ID: 1660321, Email: zc199@students.waikato.ac.nz

1. Project Review (20 points)
1.1 Systematic Issues Identified
Issue 1 - WorkoutLog Uses Naive Timestamp
Location: wger/manager/models/log.py:43
Risk: default=datetime.datetime.now returns a naive datetime. With USE_TZ=True, all log entries are stored in server time, so users in other time zones observe incorrect ordering and "future" timestamps. This undermines the reliability of workout histories and any analytical dashboards.
Recommended fix: Import timezone from Django and switch to default=timezone.now. Also audit helper scripts such as wger/tasks.py to ensure no other naive datetimes remain.
Expected impact: Ensures workout logs reflect true chronological order for all regions, which is critical for international users and downstream analytics (e.g., weekly summaries, reminder triggers).
Issue 2 - WorkoutLog.str Always Displays "kg"
Location: wger/manager/models/log.py:128
Risk: The string representation concatenates "kg" even when the stored unit is pounds, kilometers per hour, etc. Administrators reviewing logs in Django admin or CSV exports see values labelled "kg" regardless of the real unit, potentially leading to incorrect coaching decisions.
Recommended fix: Derive the unit label from self.weight_unit (or fall back to WeightUnit.name). Provide graceful placeholders ("â€”") when weight is missing.
Expected impact: Accurate, unit-aware strings make logs trustworthy for both metric and imperial users and reduce support tickets related to mismatched units.
Issue 3 - Day Lacks (routine, order) Unique Constraint
Location: wger/manager/models/day.py:30
Risk: Although order has an index, the database allows duplicate day orders within the same routine. If two days share the same order, downstream code (API serializers, front-end renderers) receives an unpredictable sequence.
Recommended fix: Introduce models.UniqueConstraint(fields=['routine', 'order'], name='unique_day_order_per_routine') in a migration, and ship a one-off data cleaner that picks the lowest unused order for duplicates.
Expected impact: Guarantees deterministic ordering at the persistence layer, which simplifies front-end logic and prevents schedule confusion.
Issue 4 - RepetitionUnit Relies on Magic IDs
Location: wger/core/models/rep_unit.py:41 (return self.id == 1)
Risk: Logic assumes ID 1 always maps to "Repetitions". If fixtures or database migrations ever reorder IDs (e.g., when seeding a new environment), all conditional paths depending on this check break silently.
Recommended fix: Add an immutable code (e.g., "repetitions", "minutes") to RepetitionUnit, populate it in a migration, and compare against this semantic field. Alternatively, expose constants from manager.consts.
Expected impact: Removes a fragile dependency on fixture order, improves readability, and supports future units (calories, distance) without hidden assumptions.
Issue 5 - Routine.dayDataCurrentIteration Lacks Front-end Sorting
Location: wger-react/src/components/WorkoutRoutines/models/Routine.ts
Risk: The getter filters by iteration but returns items in the same order as received from the API. When the backend returns days in an unexpected order (e.g., locale-specific start day), the UI mirrors that incorrect sequence, producing the exact bug reported in Issue #1980 (e.g., Sunday appearing first).
Recommended fix: Copy the filtered array and sort by day.order, then by date and day.id as tiebreakers. Add a unit test to verify ordering for mixed data sets. Note in the contribution guide that front-end fixes must land in the React source repository.
Expected impact: Delivers predictable weekday ordering for all clients, ensures future contributors can easily audit and extend the logic, and prevents regressions in newly built bundles.
1.2 Positive Design Choices
Meta-ordering and Indexes in Models
Example: Day.Meta.ordering = ['order'] with order indexed.
Benefit: Databases return sorted rows directly, reducing ORM overhead. This is a best practice for read-heavy workloads (e.g., dashboards).
Developer impact: Query code remains conciseâ€”no repetitive order_by()â€”and performance is consistent even with large routines.
Centralized React View Handling
Example: wger/core/views/react.ReactView encapsulates authentication checks, template selection, and Shadow DOM exceptions.
Benefit: Enforces DRY principles and standardizes the bootstrap process for every React page.
Developer impact: Onboarding new screens requires less boilerplate; bugs in the base view fix all consumers simultaneously.
Use of Dataclasses for Template-ready Data
Example: wger/manager/dataclasses.SlotData aggregates data for templates.
Benefit: Separates data marshalling from presentation, making the Python layer responsible for shape transformations.
Developer impact: Templates remain clean, view tests can validate structure via dataclasses, and IDE type hints remain accurate.
2. Contribution Summary (10 points)
Feature 1 - Fix Workout Day Ordering Issue (Zhengrong Chen)

Issue: https://github.com/wger-project/wger/issues/1980
Repository: https://github.com/liebeziv/wger/tree/fix-training-day-order
Pull Request: https://github.com/wger-project/wger/pull/2050

Problem: Training days occasionally rendered out of order (Monday after Wednesday), especially for locales where the backend returns Sunday as first element.
Implementation details: Reproduced the bug, evaluated CSS order, DOM reflow, backend ordering, and ultimately implemented a comparator in Routine.dayDataCurrentIteration. Sorting now respects day.order and uses date/id as stable tiebreakers.
Maintainer interaction: After submitting PR #2050, received no direct maintainer reply. From the closed PR status, inferred the issue was modifying the compiled bundle file rather than source code. Currently reimplementing the fix in the React source repository.
Outcome: Rejected - fix reworked in source repo with pending PR.
Feature 2 - Implement "Calories Burned" Workflow (Zhengrong Chen)

Issue: https://github.com/wger-project/wger/issues/2019
Repository: https://github.com/liebeziv/wger/tree/feature-calories
Pull Request: Not yet submitted

Problem: Users want workouts to auto-compute calories and sync with nutrition plans.
Implementation details: Surveyed RepetitionUnit and WorkoutLog, drafted schema for ExerciseCalorieData (intensity-aware burn rates) and UserCaloriePreference. Designed service flow to fetch base calories, adjust by user weight, and post entries to nutrition plans.
Maintainer interaction: Proposed complete implementation plan in issue #2019. Maintainer @rolandgeider replied: "adding kcal as units for workouts is a good idea" but expressed concerns about automatic calculations, noting need to add data for each exercise in database and uncertainty about accuracy. He suggested considering smartwatch sync (issue #618) as more precise alternative.
Outcome: In development - backend models and migration scaffold exist locally.
Feature 3 - Improve Exercise Search Functionality (Bai Lu)

Issue: https://github.com/wger-project/wger/issues/1112
Repository: https://github.com/vilanell000/react
Pull Requests: #1105, #1117

Problem: Search results were inaccurate for special-character or non-English exercise names.
Implementation details: Added a fuzzy matching layer using edit distance metrics, implemented language-aware normalization, and exposed a toggle for maintainers to adjust thresholds.
Maintainer interaction: In PR #1117 implemented save button visual feedback, maintainer @rolandgeider commented: "Adding some feedback is definitely a good idea" but suggested red button was "too much", recommended disabling button during query, showing âœ… on success, and using FormQueryErrors component for errors. Adjusted implementation based on feedback.
Outcome: Partially merged - basic fuzzy search is live (PR #1105), advanced tuning awaiting review (PR #1117).
Feature 4 - Nutrition Table Rounding Precision (Simin Cheng)

Issue: https://github.com/wger-project/react/issues/1108
Repository: https://github.com/simin-ch/react/tree/nutrition-precision-feature
Pull Request: In preparation

Problem: Nutritional totals rounded prematurely, leading to visible discrepancies between expected and displayed values.
Implementation details: Added a precision toggle stored in React Context and persisted with localStorage, refactored calculation pipeline to keep raw float values until the final render stage.
Maintainer interaction: Detailed the rounding-induced calculation inaccuracy in issue #1108, awaiting maintainer feedback.
Outcome: In development - awaiting documentation polish before submission.
Feature 5 - Meal Form Timepicker Fix (Simin Cheng)

Issue: https://github.com/wger-project/react/issues/1115
Repository: https://github.com/simin-ch/react/tree/fix-timepicker-bug
Pull Request: https://github.com/wger-project/react/pull/1116

Problem: "Add Meal" forms could not edit the meal time correctly due to incompatible DateTime objects.
Implementation details: Converted Luxon DateTime to native Date before passing data into Formik, ensuring the timepicker widget updates state reliably.
Maintainer interaction: When submitting PR #1116, explained the root cause: Formik expects JS Date but received Luxon DateTime. Maintainer @rolandgeider responded quickly: "I had barely seen your original issue and you directly open this PR ðŸ˜„" and merged the fix 5 days ago.
Outcome: Merged - deployed to production.
Feature 6 - Language Dropdown Overflow on Small Screens (Ziqi Lin)

Issue: https://github.com/wger-project/wger/issues/2040
Repository: https://github.com/Carner-Lin/wger/tree/language-dropdown
Pull Request: https://github.com/wger-project/wger/pull/2042

Problem: Footer language selector would extend beyond the viewport and prevent access to top entries.
Implementation details: Introduced a dedicated CSS class with max-height: 60vh, overflow-y: auto, and guard rails like overscroll-behavior: contain, ensuring the dropdown is scrollable yet constrained.
Maintainer interaction: PR #2042 submitted and awaiting review, no maintainer feedback yet.
Outcome: Awaiting review.
Feature 7 - Prevent Negative Height Values in Preferences (Ziqi Lin)

Issue: Self-discovered (not filed)
Repository: https://github.com/Carner-Lin/wger/tree/Height-limit
Pull Request: https://github.com/wger-project/wger/pull/2030

Problem: Height spinner accepted negative numbers.
Implementation details: Added type="number", min="0", and step="1" to the input; verified that HTML5 validation surfaces a native "must be â‰¥ 0" message.
Maintainer interaction: PR #2030 awaiting review, no maintainer response yet.
Outcome: Awaiting review.
Feature 8 - Routine Page Thumbnails Overlapping Text (Ziqi Lin)

Issue: https://github.com/wger-project/react/issues/1120
Repository: https://github.com/Carner-Lin/react/tree/routine-layout-fixes
Pull Request: https://github.com/wger-project/react/pull/1121

Problem: At narrow widths, exercise thumbnails overlapped descriptions.
Implementation details: Converted the layout to a non-wrapping flex container, locked the thumbnail column width, and enabled wrapping for text so long titles stay within bounds.
Maintainer interaction: Issue #1120 and PR #1121 awaiting review, no specific maintainer feedback yet.
Outcome: Awaiting review.
3. Lessons Learned
Submit changes to the right repository - The workout ordering fix was initially applied to the compiled JavaScript bundle. Maintainers rightly rejected it and clarified that all React changes must be proposed in the wger-react repository. This experience highlighted the importance of understanding build pipelines before submitting patches.
Design communication matters - For the calorie automation feature, presenting a bilingual, structured plan made it easier for maintainers to give feedback. Even though the feature is still under development, aligning ideas early prevented significant rework.
Incremental wins build trust - Bai Lu's fuzzy search enhancement shows that shipping a smaller improvement first (PR #1105) establishes confidence, making maintainers more receptive to follow-up PRs with deeper changes.
Document partially completed work - Many contributions remain in review or were rejected for technical reasons, but documenting them demonstrates a transparent, process-driven approachâ€”exactly what the course instructor emphasizes.
Testing and reproducibility go hand-in-hand - For front-end layout fixes (language dropdown, routine thumbnails), attaching screenshots and responsive design notes reduced ambiguity and built reviewer confidence without requiring them to reproduce the environment manually.
