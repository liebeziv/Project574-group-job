Group Member Information:

Name: Simin Cheng, Student ID: 1663732, Email: sc1040@students.waikato.ac.nz
Name: Bai Lu, Student ID: 1671298, Email: ys677@students.waikato.ac.nz
Name: Ziqi Lin, Student ID: 1674249, Email: zl354@students.waikato.ac.nz
Name: Zhengrong Chen, Student ID: 1660321, Email: zc199@students.waikato.ac.nz
1. Project Review (20 points)1.1 Systematic Issues Identified in the CodebaseIssue 1: WorkoutLog Timestamp Uses Naive DatetimeLocation: wger/manager/models/log.py:43Why this is a problem: The field uses default=datetime.datetime.now which returns a naive datetime. With the project's default USE_TZ=True setting, logs are stored using server timezone, causing inconsistent display and sorting for users across different timezones. This is a serious systematic issue for an internationalized application.Suggested solution: Use from django.utils import timezone and change the field to default=timezone.now. Also review wger/tasks.py and other scripts to ensure no naive datetime usage remains in the project.Expected impact: After fixing, all users' workout logs will display in correct chronological order regardless of timezone, significantly improving the internationalization experience.Issue 2: WorkoutLog.str Forces Output in "kg"Location: wger/manager/models/log.py:128Why this is a problem: Regardless of the weight unit selected by users (such as lb, km/h), the __str__ method always concatenates "kg", causing confusion in the Django admin panel and log lists. This is a systematic issue affecting data display accuracy.Suggested solution: Dynamically render the actual unit based on weight_unit (can utilize WeightUnit.name or build a unit mapping dictionary), and provide reasonable placeholders for missing values.Expected impact: Reduces unit confusion, improves the experience for non-metric users (especially US users), and increases data display accuracy.Issue 3: Day Model Lacks (routine, order) Unique ConstraintLocation: wger/manager/models/day.py:30Why this is a problem: Although the order field has a database index, duplicate order values within the same routine are allowed, causing training day sequence confusion and unpredictable sorting in the frontend (such as Sunday appearing first). This is a data integrity issue.Suggested solution: Add UniqueConstraint(fields=['routine', 'order'], name='unique_day_order_per_routine') and provide a one-time data migration script to fix existing duplicate data.Expected impact: Ensures training day sequence consistency at the database level, eliminates sorting confusion, and improves user experience predictability.Issue 4: RepetitionUnit Relies on Hardcoded ID for Type DetectionLocation: wger/core/models/rep_unit.py:41 (return self.id == 1)Why this is a problem: Code assumes id == 1 always represents "Repetitions". If fixtures loading order changes or IDs change after database rebuild, all such logic will fail. Using magic numbers is a typical code smell.Suggested solution: Add a stable code or slug field to RepetitionUnit and populate it in migration, then base logic on this field, or use enum constants.Expected impact: Improves system robustness and portability, avoids potential bugs from magic numbers, makes code more understandable and maintainable.Issue 5: React Frontend Lacks Sorting Logic and Source Code Not VisibleLocation: wger/core/static/react/main.js (single-line compressed bundle only)Why this is a problem: Main repository only commits build artifacts, actual source code resides in separate wger-react project, making code review and debugging difficult. Current bundle renders dayDataCurrentIteration without explicit sorting, relying on backend order, causing users to see confused training day sequences.Suggested solution: Sort dayData by day.order in React source repository and add unit tests, main repository should only store reviewed build artifacts. Also clarify frontend modification process in contribution guide.Expected impact: Improves frontend change maintainability and transparency, stabilizes training day display, facilitates community contributor participation in frontend development.1.2 Positive Design ChoicesStrength 1: Models Use Meta.ordering and Index OptimizationDesign description: For example, Day.Meta.ordering = ['order'] with the order field indexed.Why this is a good choice: Database can directly return sorted result sets, reducing application-layer sorting overhead. This is a performance optimization best practice.Impact on developer experience: Query code is cleaner, no need to manually add order_by clauses; performance is more stable, especially when handling large datasets.Strength 2: ReactView Centralizes Container View ManagementDesign description: ReactView in wger/core/views/react.py uniformly handles login verification, template rendering, and Shadow DOM logic.Why this is a good choice: Follows DRY (Don't Repeat Yourself) principle, abstracting common logic into base class, new React pages only need to inherit this view.Impact on developer experience: Significantly reduces complexity of adding new React pages, reduces duplicate code, improves code maintainability.Strength 3: Dataclasses Preprocess Display DataDesign description: wger/manager/dataclasses.py defines data classes like SlotData, uniformly organizing data structures needed by templates.Why this is a good choice: Separates data preparation logic from template layer, templates only handle rendering, business logic is centralized in Python side, easy to test and maintain.Impact on developer experience: Better type hints and IDE support, centralized data processing logic facilitates debugging, improves code readability and testability.2. Contribution Summary (10 points)Feature 1: Fix workout day ordering issue [Zhengrong Chen]
Issue: https://github.com/wger-project/wger/issues/1980
Repository: https://github.com/liebeziv/wger/tree/fix-training-day-order
Pull Request: https://github.com/wger-project/wger/pull/2050
Problem description: Users reported that when viewing workout plans, training days would randomly change order, causing Monday's workout to potentially display after Wednesday's, severely impacting user experience.Our approach: Reproduced and analyzed the root cause of training day confusion, explored CSS, JavaScript, and backend solutions. Finally implemented a sorting comparator in React source code to ensure training days display in correct order.Communication with maintainers: After submitting PR, maintainer pointed out that compressed artifact files should not be modified, requested changes in the correct source repository.Outcome: Rejected - PR #2050 was rejected due to incorrect modification location, currently resubmitting to source repository.Feature 2: Implement calories burned feature [Zhengrong Chen]
Issue: https://github.com/wger-project/wger/issues/2019
Repository: https://github.com/liebeziv/wger/tree/feature-calories
Pull Request: Not yet submitted
Problem description: Users requested adding functionality to record calories burned during exercise for better energy balance tracking.Our approach: Thoroughly researched RepetitionUnit and WorkoutLog implementation, designed a complete solution including public calorie database, automatic calculation service, and nutrition plan synchronization strategy. Drafted bilingual communication to seek maintainer feedback.Communication with maintainers: Detailed implementation plan described in issue, awaiting maintainer feedback.Outcome: In development - Currently implementing core functionality, planning to submit PR after completion.Feature 3: Improve exercise search functionality [Bai Lu]
Issue: https://github.com/wger-project/wger/issues/1112
Repository: https://github.com/vilanell000/react
Pull Request:

https://github.com/wger-project/react/pull/1105
https://github.com/wger-project/react/pull/1117


Problem description: Users reported inaccurate search results when searching for exercises, especially for exercises with special characters or non-English names.Our approach: Introduced fuzzy matching algorithm and multilingual support, first validated in personal fork, then submitted to upstream in phases. Implemented fuzzy search based on edit distance and spelling error tolerance.Communication with maintainers: Discussed improvement plan in issue #1112, maintainer suggested starting with simple features and gradually enhancing.Outcome: Partially merged - PR #1105 basic fuzzy search merged, PR #1117 advanced optimization under review.Feature 4: Nutritional value table calculation inaccuracy due to rounding [Simin Cheng]
Issue: https://github.com/wger-project/react/issues/1108
Repository: https://github.com/simin-ch/react/tree/nutrition-precision-feature
Pull Request: Preparing to submit
Problem description: Nutritional value tables displayed inaccurate totals due to premature rounding causing calculation errors.Our approach: Implemented user-controlled precision toggle feature, allowing users to choose between integer display and one decimal display. Used React Context and localStorage for global settings persistence.Communication with maintainers: Detailed problem and solution in issue #1108, maintainer approved the user-controlled precision design concept.Outcome: In development - Feature implemented and tested, preparing documentation for PR submission.Feature 5: Add meal form time field not editable [Simin Cheng]
Issue: https://github.com/wger-project/react/issues/1115
Repository: https://github.com/simin-ch/react/tree/fix-timepicker-bug
Pull Request: https://github.com/wger-project/react/pull/1116
Problem description: In the "Add Meal" form, the time field was not properly editable or selectable.Our approach: Converted Luxon DateTime object to JavaScript Date object for Formik form library compatibility.Communication with maintainers: Explained problem cause and fix method in PR #1116, maintainer approved the solution.Outcome: Merged - PR #1116 accepted and deployed to production.Feature 6: Language switcher only shows part of the list on smaller screens [Ziqi Lin]
Issue: https://github.com/wger-project/wger/issues/2040
Repository: https://github.com/Carner-Lin/wger/tree/language-dropdown
Pull Request: https://github.com/wger-project/wger/pull/2042
Problem description: The language dropdown in the footer could extend beyond the viewport on small windows, making top entries unreachable. Users couldn't scroll inside the dropdown to access hidden languages.Our approach: Added specific CSS class to dropdown <ul> element, introduced lightweight stylesheet limiting menu height to viewport-relative value (max-height: 60vh) and enabled vertical scrolling (overflow-y: auto). Also constrained width to avoid horizontal overflow and applied overscroll-behavior: contain so scroll gestures are captured by menu instead of leaking to page behind.Communication with maintainers: Detailed problem and solution in PR #2042, maintainer acknowledged the necessity of the fix.Outcome: Awaiting review - PR #2042 submitted, waiting for maintainer review.Feature 7: The height spinner in user preferences can be set below 0 [Ziqi Lin]
Issue: Not reported (self-discovered)
Repository: https://github.com/Carner-Lin/wger/tree/Height-limit
Pull Request: https://github.com/wger-project/wger/pull/2030
Problem description: The "Height (cm)" input in user preferences allowed negative values via spinner, which is logically unreasonable.Our approach: Set type="number", step="1", and min="0" at form layer, making spinner stop at zero and prompting native "must be ≥ 0" message when user types negative number.Communication with maintainers: Explained this edge case fix in PR #2030.Outcome: Awaiting review - PR #2030 submitted, maintainer has not yet responded.Feature 8: Layout misalignment causes thumbnails to obscure text [Ziqi Lin]
Issue: https://github.com/wger-project/react/issues/1120
Repository: https://github.com/Carner-Lin/react/tree/routine-layout-fixes
Pull Request: https://github.com/wger-project/react/pull/1121
Problem description: On the routine page, as window width gradually decreases, distance between exercise thumbnail and text also decreases, eventually causing thumbnail to obscure text.Our approach: Made row a non-wrapping flex/grid container so image and text stay on same line; gave left column fixed, non-shrinking width; allowed right column to actually shrink and wrap so long titles wrap within their own column instead of displacing image; kept multiple thumbnails vertically stacked with small consistent gap.Communication with maintainers: Discussed layout issue in issue #1120 and provided complete responsive solution in PR #1121.Outcome: Awaiting review - PR #1121 submitted, waiting for code review.
